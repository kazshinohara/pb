// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc-echo.proto

package grpc_echo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	// Unary RPC
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*All, error)
	GetKind(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Kind, error)
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error)
	GetRegion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Region, error)
	GetCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Cluster, error)
	GetInstanceId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InstanceId, error)
	GetHostname(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Hostname, error)
	GetSourceIp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SourceIp, error)
	GetHeader(ctx context.Context, in *HeaderName, opts ...grpc.CallOption) (*HeaderValue, error)
	// Server streaming RPC
	GetHostnameServerStream(ctx context.Context, in *ServerStreamConfig, opts ...grpc.CallOption) (EchoService_GetHostnameServerStreamClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*All, error) {
	out := new(All)
	err := c.cc.Invoke(ctx, "/EchoService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetKind(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Kind, error) {
	out := new(Kind)
	err := c.cc.Invoke(ctx, "/EchoService/GetKind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/EchoService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetRegion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Region, error) {
	out := new(Region)
	err := c.cc.Invoke(ctx, "/EchoService/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/EchoService/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetInstanceId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InstanceId, error) {
	out := new(InstanceId)
	err := c.cc.Invoke(ctx, "/EchoService/GetInstanceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetHostname(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Hostname, error) {
	out := new(Hostname)
	err := c.cc.Invoke(ctx, "/EchoService/GetHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetSourceIp(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SourceIp, error) {
	out := new(SourceIp)
	err := c.cc.Invoke(ctx, "/EchoService/GetSourceIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetHeader(ctx context.Context, in *HeaderName, opts ...grpc.CallOption) (*HeaderValue, error) {
	out := new(HeaderValue)
	err := c.cc.Invoke(ctx, "/EchoService/GetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetHostnameServerStream(ctx context.Context, in *ServerStreamConfig, opts ...grpc.CallOption) (EchoService_GetHostnameServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], "/EchoService/GetHostnameServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceGetHostnameServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_GetHostnameServerStreamClient interface {
	Recv() (*Hostname, error)
	grpc.ClientStream
}

type echoServiceGetHostnameServerStreamClient struct {
	grpc.ClientStream
}

func (x *echoServiceGetHostnameServerStreamClient) Recv() (*Hostname, error) {
	m := new(Hostname)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	// Unary RPC
	GetAll(context.Context, *emptypb.Empty) (*All, error)
	GetKind(context.Context, *emptypb.Empty) (*Kind, error)
	GetVersion(context.Context, *emptypb.Empty) (*Version, error)
	GetRegion(context.Context, *emptypb.Empty) (*Region, error)
	GetCluster(context.Context, *emptypb.Empty) (*Cluster, error)
	GetInstanceId(context.Context, *emptypb.Empty) (*InstanceId, error)
	GetHostname(context.Context, *emptypb.Empty) (*Hostname, error)
	GetSourceIp(context.Context, *emptypb.Empty) (*SourceIp, error)
	GetHeader(context.Context, *HeaderName) (*HeaderValue, error)
	// Server streaming RPC
	GetHostnameServerStream(*ServerStreamConfig, EchoService_GetHostnameServerStreamServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) GetAll(context.Context, *emptypb.Empty) (*All, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEchoServiceServer) GetKind(context.Context, *emptypb.Empty) (*Kind, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKind not implemented")
}
func (UnimplementedEchoServiceServer) GetVersion(context.Context, *emptypb.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedEchoServiceServer) GetRegion(context.Context, *emptypb.Empty) (*Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedEchoServiceServer) GetCluster(context.Context, *emptypb.Empty) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedEchoServiceServer) GetInstanceId(context.Context, *emptypb.Empty) (*InstanceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceId not implemented")
}
func (UnimplementedEchoServiceServer) GetHostname(context.Context, *emptypb.Empty) (*Hostname, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostname not implemented")
}
func (UnimplementedEchoServiceServer) GetSourceIp(context.Context, *emptypb.Empty) (*SourceIp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceIp not implemented")
}
func (UnimplementedEchoServiceServer) GetHeader(context.Context, *HeaderName) (*HeaderValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeader not implemented")
}
func (UnimplementedEchoServiceServer) GetHostnameServerStream(*ServerStreamConfig, EchoService_GetHostnameServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHostnameServerStream not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetKind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetKind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetKind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetKind(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetRegion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetInstanceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetInstanceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetInstanceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetInstanceId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetHostname(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetSourceIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetSourceIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetSourceIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetSourceIp(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeaderName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/GetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetHeader(ctx, req.(*HeaderName))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetHostnameServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamConfig)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).GetHostnameServerStream(m, &echoServiceGetHostnameServerStreamServer{stream})
}

type EchoService_GetHostnameServerStreamServer interface {
	Send(*Hostname) error
	grpc.ServerStream
}

type echoServiceGetHostnameServerStreamServer struct {
	grpc.ServerStream
}

func (x *echoServiceGetHostnameServerStreamServer) Send(m *Hostname) error {
	return x.ServerStream.SendMsg(m)
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _EchoService_GetAll_Handler,
		},
		{
			MethodName: "GetKind",
			Handler:    _EchoService_GetKind_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _EchoService_GetVersion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _EchoService_GetRegion_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _EchoService_GetCluster_Handler,
		},
		{
			MethodName: "GetInstanceId",
			Handler:    _EchoService_GetInstanceId_Handler,
		},
		{
			MethodName: "GetHostname",
			Handler:    _EchoService_GetHostname_Handler,
		},
		{
			MethodName: "GetSourceIp",
			Handler:    _EchoService_GetSourceIp_Handler,
		},
		{
			MethodName: "GetHeader",
			Handler:    _EchoService_GetHeader_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHostnameServerStream",
			Handler:       _EchoService_GetHostnameServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc-echo.proto",
}
