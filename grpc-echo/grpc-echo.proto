syntax = "proto3";

option go_package = "github.com/kazshinohara/pb/grpc-echo";

import "google/protobuf/empty.proto";

service EchoService {
  // Unary RPC
  rpc GetAll(google.protobuf.Empty) returns (All);
  rpc GetKind(google.protobuf.Empty) returns (Kind);
  rpc GetVersion(google.protobuf.Empty) returns (Version);
  rpc GetRegion(google.protobuf.Empty) returns (Region);
  rpc GetCluster(google.protobuf.Empty) returns (Cluster);
  rpc GetInstanceId(google.protobuf.Empty) returns (InstanceId);
  rpc GetHostname(google.protobuf.Empty) returns (Hostname);
  rpc GetSourceIp(google.protobuf.Empty) returns (SourceIp);
  rpc GetHeader(HeaderName) returns (HeaderValue);
  // Server streaming RPC
  rpc GetHostnameServerStream(ServerStreamConfig) returns (stream Hostname);
  //TODO Add client, bi-directional streaming gRPC
}

message All {
  string kind = 1;
  string version = 2;
  string region = 3;
  string cluster = 4;
  string instance_id = 5;
  string hostname = 6;
  string source_ip =7;
}

message Kind {
  string kind =1;
}

message Version {
  string version =1;
}

message Region {
  string region=1;
}

message Cluster {
  string cluster =1;
}

message Hostname {
  string hostname =1;
  string timestamp =2; // For failover test
}

message InstanceId {
  string instance_id = 1;
}

message SourceIp{
  string source_ip =1;
}

message HeaderName{
  string request_header_name = 1;
}

message HeaderValue {
  string request_header_value =1;
}

message ServerStreamConfig{
  int32 interval =1;
  int32 number_of_response =2;
}
