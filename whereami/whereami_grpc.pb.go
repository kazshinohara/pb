// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: whereami.proto

package whereami

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhereamiClient is the client API for Whereami service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhereamiClient interface {
	GetServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerInfo, error)
}

type whereamiClient struct {
	cc grpc.ClientConnInterface
}

func NewWhereamiClient(cc grpc.ClientConnInterface) WhereamiClient {
	return &whereamiClient{cc}
}

func (c *whereamiClient) GetServerInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := c.cc.Invoke(ctx, "/Whereami/GetServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhereamiServer is the server API for Whereami service.
// All implementations must embed UnimplementedWhereamiServer
// for forward compatibility
type WhereamiServer interface {
	GetServerInfo(context.Context, *emptypb.Empty) (*ServerInfo, error)
	mustEmbedUnimplementedWhereamiServer()
}

// UnimplementedWhereamiServer must be embedded to have forward compatible implementations.
type UnimplementedWhereamiServer struct {
}

func (UnimplementedWhereamiServer) GetServerInfo(context.Context, *emptypb.Empty) (*ServerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedWhereamiServer) mustEmbedUnimplementedWhereamiServer() {}

// UnsafeWhereamiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhereamiServer will
// result in compilation errors.
type UnsafeWhereamiServer interface {
	mustEmbedUnimplementedWhereamiServer()
}

func RegisterWhereamiServer(s grpc.ServiceRegistrar, srv WhereamiServer) {
	s.RegisterService(&Whereami_ServiceDesc, srv)
}

func _Whereami_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhereamiServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Whereami/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhereamiServer).GetServerInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Whereami_ServiceDesc is the grpc.ServiceDesc for Whereami service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whereami_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Whereami",
	HandlerType: (*WhereamiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInfo",
			Handler:    _Whereami_GetServerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whereami.proto",
}
